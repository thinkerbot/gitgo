#!/bin/bash
############################################################################
usage="\
usage: gitgo-write [-a ATTACHMENT...] [-b BRANCH] [-h] [-t TAG...] [THREAD...]

  Writes a message to the 'gitgo' branch to the specified threads. If the
  branch does not exist, it will be created.

  Attachments are saved in the tree and the message is read from stdin. The
  parent commits are determined from the threads; all tail messages are made
  parents by default. Specific shas can be used instead of thread ids. Starts
  a new thread if no threads are specified.

  Prints the sha of the resulting message.

options:

        -a    attachment files
        -b    the storage branch (default 'gitgo')
        -d    debug mode
        -h    prints this help
        -t    specify tags

"
############################################################################

attachments=""
branch="gitgo"
tags=""
mode="+"
while getopts "a:b:dht:" option
do
  case $option in
    a  )  attachments="${attachments}${OPTARG}\n" ;;
    b  )  branch="$OPTARG" ;;
    d  )  debug="true" ;;
    h  )  printf "$usage"
          exit 0 ;;
    t  )  tags="${tags}${OPTARG}\n" ;;
    \? )  printf "$usage" | head -n 1
          exit 2 ;;
  esac
done
shift $(($OPTIND - 1))

if [ "$debug" == "true" ]
then set -x
fi

############################################################################

# what happens if two files have the same basename?
format_ls_tree() {
  attachments="$1";

  echo -e "$attachments" |
  while read file
  do
    if [ "$file" ]
    then
      name=`basename "$file"`
      sha=`git hash-object -w "$file"`
      printf "100644 blob %s\t%s\n" "$sha" "$name"
    fi
  done
}

format_metadata () {
  tags="$1"; mode="$2";
  shift 2;

  printf -- "\n---\n"

  echo -e "$tags" |
  while read tag
  do
    if [ "$tag" ]
    then printf ": %s\n" "$tag"
    fi
  done

  for parent in $@
  do
    if [ "$parent" ]
    then
      parent=`git rev-parse --verify -q "$parent"`
      printf "%s %s\n" "$mode" "$parent"
    fi
  done
}

############################################################################

parent=`git rev-parse --verify -q "$branch"`
tree=`format_ls_tree "$attachments" | git mktree`
sha=`cat - <(format_metadata "$tags" "$mode" $@) | git commit-tree "$tree" ${parent:+-p} $parent`

printf "%s\n" "$sha" | tee .git/refs/heads/"$branch"
