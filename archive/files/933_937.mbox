From news@gmane.org Tue Mar 04 03:33:20 2003
From: Linus Torvalds <torvalds@osdl.org>
Subject: Re: [RFC] Possible strategy cleanup for git add/remove/diff etc.
Date: Tue, 19 Apr 2005 21:32:44 -0700 (PDT)
Lines: 122
Message-ID: <Pine.LNX.4.58.0504192102140.6467@ppc970.osdl.org>
References: <20050419035107.GB5554@pasky.ji.cz> <7vacnumgot.fsf@assigned-by-dhcp.cox.net>
 <Pine.LNX.4.58.0504191846290.6467@ppc970.osdl.org>
Mime-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Cc: Petr Baudis <pasky@ucw.cz>, git@vger.kernel.org
X-From: git-owner@vger.kernel.org Wed Apr 20 06:27:01 2005
Return-path: <git-owner@vger.kernel.org>
Received: from vger.kernel.org ([12.107.209.244])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1DO6ne-0007Ok-S7
	for gcvg-git@gmane.org; Wed, 20 Apr 2005 06:26:55 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261348AbVDTEbH (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 20 Apr 2005 00:31:07 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261352AbVDTEbH
	(ORCPT <rfc822;git-outgoing>); Wed, 20 Apr 2005 00:31:07 -0400
Received: from fire.osdl.org ([65.172.181.4]:9393 "EHLO smtp.osdl.org")
	by vger.kernel.org with ESMTP id S261348AbVDTEay (ORCPT
	<rfc822;git@vger.kernel.org>); Wed, 20 Apr 2005 00:30:54 -0400
Received: from shell0.pdx.osdl.net (fw.osdl.org [65.172.181.6])
	by smtp.osdl.org (8.12.8/8.12.8) with ESMTP id j3K4Uls4018811
	(version=TLSv1/SSLv3 cipher=EDH-RSA-DES-CBC3-SHA bits=168 verify=NO);
	Tue, 19 Apr 2005 21:30:47 -0700
Received: from localhost (shell0.pdx.osdl.net [10.9.0.31])
	by shell0.pdx.osdl.net (8.13.1/8.11.6) with ESMTP id j3K4UjoP018243;
	Tue, 19 Apr 2005 21:30:46 -0700
To: Junio C Hamano <junkio@cox.net>
In-Reply-To: <Pine.LNX.4.58.0504191846290.6467@ppc970.osdl.org>
X-Spam-Status: No, hits=0 required=5 tests=
X-Spam-Checker-Version: SpamAssassin 2.63-osdl_revision__1.35__
X-MIMEDefang-Filter: osdl$Revision: 1.109 $
X-Scanned-By: MIMEDefang 2.36
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Status: RO



On Tue, 19 Apr 2005, Linus Torvalds wrote:
> 
> That is indeed the whole point of the index file. In my world-view, the
> index file does _everything_. It's the staging area ("work file"), it's
> the merging area ("merge directory") and it's the cache file ("stat
> cache").
> 
> I'll immediately write a tool to diff the current working directory 
> against a tree object, and hopefully that will just make pasky happy with 
> this model too. 

Ok, "immediately" took a bit longer than I wanted to, and quite frankly,
the end result is not very well tested. It was a bit more complex than I
was hoping for to match up the index file against a tree object, since
unlike the tree<->tree comparison in diff-tree, you have to compare two
cases where the layout isn't the same.

No matter. It seems to work to a first approximation, and the result is
such a cool tool that it's worth committing and pushing out immediately. 

The code ain't exactly pretty, but hey, maybe that's just me having higher 
standards of beauty than most. Or maybe you just shudder at what I 
consider pretty in the first place, in which case you probably shouldn't 
look too closely at this one.

What the new "diff-cache" does is basically emulate "diff-tree", except 
one of the trees is always the index file.

You can also choose whether you want to trust the index file entirely
(using the "--cached" flag) or ask the diff logic to show any files that
don't match the stat state as being "tentatively changed".  Both of these
operations are very useful indeed.

For example, let's say that you have worked on your index file, and are
ready to commit. You want to see eactly _what_ you are going to commit is
without having to write a new tree object and compare it that way, and to
do that, you just do

	diff-cache --cached $(cat .git/HEAD)

(another difference between diff-tree and diff-cache is that the new 
diff-cache can take a "commit" object, and it automatically just extracts 
the tree information from there).

Example: let's say I had renamed "commit.c" to "git-commit.c", and I had 
done an "upate-cache" to make that effective in the index file. 
"show-diff" wouldn't show anything at all, since the index file matches 
my working directory. But doing a diff-cache does:

	torvalds@ppc970:~/git> diff-cache --cached $(cat .git/HEAD)
	-100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c
	+100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c

So what the above "diff-cache" command line does is to say

   "show me the differences between HEAD and the current index contents 
    (the ones I'd write with a "write-tree")"

And as you can see, the output matches "diff-tree -r" output (we always do
"-r", since the index is always fully populated). All the same rules: "+"  
means added file, "-" means removed file, and "*" means changed file. You 
can trivially see that the above is a rename.

In fact, "diff-tree --cached" _should_ always be entirely equivalent to
actually doing a "write-tree" and comparing that. Except this one is much
nicer for the case where you just want to check. Maybe you don't want to
do the tree.

So doing a "diff-cache --cached" is basically very useful when you are 
asking yourself "what have I already marked for being committed, and 
what's the difference to a previous tree".

However, the "non-cached" version takes a different approach, and is
potentially the even more useful of the two in that what it does can't be
emulated with a "write-tree + diff-tree". Thus that's the default mode.  
The non-cached version asks the question

   "show me the differences between HEAD and the currently checked out 
    tree - index contents _and_ files that aren't up-to-date"

which is obviously a very useful question too, since that tells you what
you _could_ commit. Again, the output matches the "diff-tree -r" output to
a tee, but with a twist.

The twist is that if some file doesn't match the cache, we don't have a
backing store thing for it, and we use the magic "all-zero" sha1 to show
that. So let's say that you have edited "kernel/sched.c", but have not
actually done an update-cache on it yet - there is no "object" associated
with the new state, and you get:

	torvalds@ppc970:~/v2.6/linux> diff-cache $(cat .git/HEAD )
	*100644->100664 blob    7476bbcfe5ef5a1dd87d745f298b831143e4d77e->0000000000000000000000000000000000000000      kernel/sched.c

ie it shows that the tree has changed, and that "kernel/sched.c" has is
not up-to-date and may contain new stuff. The all-zero sha1 means that to
get the real diff, you need to look at the object in the working directory
directly rather than do an object-to-object diff.

NOTE! As with other commands of this type, "diff-cache" does not actually 
look at the contents of the file at all. So maybe "kernel/sched.c" hasn't 
actually changed, and it's just that you touched it. In either case, it's 
a note that you need to upate-cache it to make the cache be in sync.

NOTE 2! You can have a mixture of files show up as "has been updated" and
"is still dirty in the working directory" together. You can always tell
which file is in which state, since the "has been updated" ones show a
valid sha1, and the "not in sync with the index" ones will always have the
special all-zero sha1.

I think this should obviate the need for Pasky keeping a separate work 
file. You can always tell what the difference to the last commit is with 
this, and you don't need to have a separate file to tell you about what 
you're supposed to do.

			Linus
-
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html



From news@gmane.org Tue Mar 04 03:33:20 2003
From: Zach Welch <zw@superlucidity.net>
Subject: [PATCH 0/3] introduce GIT_CACHE_DIRECTORY to plumbing
Date: Tue, 19 Apr 2005 21:32:06 -0700
Lines: 27
Message-ID: <mailbox-1370-1113971526-282751@spoon>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Cc: torvalds@osdl.org
X-From: git-owner@vger.kernel.org Wed Apr 20 06:28:11 2005
Return-path: <git-owner@vger.kernel.org>
Received: from vger.kernel.org ([12.107.209.244])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1DO6oj-0007VI-4M
	for gcvg-git@gmane.org; Wed, 20 Apr 2005 06:28:02 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261352AbVDTEcK (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 20 Apr 2005 00:32:10 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261360AbVDTEcK
	(ORCPT <rfc822;git-outgoing>); Wed, 20 Apr 2005 00:32:10 -0400
Received: from guft.superlucidity.net ([63.224.205.130]:22415 "EHLO
	mail.guft.org") by vger.kernel.org with ESMTP id S261352AbVDTEcH
	(ORCPT <rfc822;git@vger.kernel.org>);
	Wed, 20 Apr 2005 00:32:07 -0400
Received: (qmail 1375 invoked by uid 5006); 19 Apr 2005 21:32:06 -0700
To: git@vger.kernel.org
Lines: 22
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Status: RO

The first patch introduces the GIT_CACHE_DIRECTORY to the C plumbing.
Without this patch, the index file and its lock are always placed
in './.git'.  Scripts wishing to run these commands from a different 
working directory can use this support to override the cache directory.

The second patch renames the DB_ENVIRONMENT symbols to match.  Note,
the name changes came from an off-list comment from Linus, after my
sendpatches script accidentally bombed him with a half dozen copies of
the init-db patch series summary.  His comment inspired these last two.

The third patch renames SHA1_FILE_DIRECTORY as GIT_OBJECT_DIRECTORY,
to match the "GIT_CACHE_DIRECTORY" name introduced in the first patch.
This was done last and seperately so it can be applied after a little
bit of notice.  We're not at a point of need to be backwards compatible.

This require my latest init-db cleanups be applied first, otherwise
you will get a rejection in init-db.c.

There are 3 patches in this series:
        [PATCH 1/3] add GIT_CACHE_DIRECTORY support
        [PATCH 2/3] rename object directory symbols
        [PATCH 3/3] rename SHA1_FILE_DIRECTORY
-
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html



From news@gmane.org Tue Mar 04 03:33:20 2003
From: Zach Welch <zw@superlucidity.net>
Subject: [PATCH 1/3] add GIT_CACHE_DIRECTORY support
Date: Tue, 19 Apr 2005 21:32:06 -0700
Lines: 224
Message-ID: <mailbox-1370-1113971526-293449@spoon>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Cc: torvalds@osdl.org
X-From: git-owner@vger.kernel.org Wed Apr 20 06:28:50 2005
Return-path: <git-owner@vger.kernel.org>
Received: from vger.kernel.org ([12.107.209.244])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1DO6p7-0007Xk-Kr
	for gcvg-git@gmane.org; Wed, 20 Apr 2005 06:28:25 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261357AbVDTEce (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 20 Apr 2005 00:32:34 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261369AbVDTEce
	(ORCPT <rfc822;git-outgoing>); Wed, 20 Apr 2005 00:32:34 -0400
Received: from guft.superlucidity.net ([63.224.205.130]:22927 "EHLO
	mail.guft.org") by vger.kernel.org with ESMTP id S261357AbVDTEcJ
	(ORCPT <rfc822;git@vger.kernel.org>);
	Wed, 20 Apr 2005 00:32:09 -0400
Received: (qmail 1379 invoked by uid 5006); 19 Apr 2005 21:32:08 -0700
To: git@vger.kernel.org
In-Reply-To: mailbox-1370-1113971526-282751@spoon
Lines: 219
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Status: RO

 cache.h        |    3 +++
 init-db.c      |    9 +++++++--
 read-cache.c   |   15 +++++++++++++--
 read-tree.c    |   35 ++++++++++++++++++++++++++---------
 update-cache.c |   33 ++++++++++++++++++++++++---------
 5 files changed, 73 insertions(+), 22 deletions(-)

Signed-Off-By: Zach Welch <zw@superlucidity.net>

This patch introduces the GIT_CACHE_DIRECTORY to the C plumbing.
Without this patch, the index file and its lock are always placed
in './.git'.  Scripts wishing to run these commands from a different 
working directory can use this support to override the cache directory.

This require my latest init-db cleanups be applied first, otherwise
you will get a rejection in init-db.c.

cache.h: 5948db759b3f6fb5ade3b027f202330f71a8cb6a
--- a/cache.h
+++ b/cache.h
@@ -81,6 +81,9 @@ const char *sha1_file_directory;
 struct cache_entry **active_cache;
 unsigned int active_nr, active_alloc;
 
+#define GIT_CACHE_ENVIRONMENT "GIT_CACHE_DIRECTORY"
+#define DEFAULT_GIT_CACHE_ENVIRONMENT ".git"
+
 #define DB_ENVIRONMENT "SHA1_FILE_DIRECTORY"
 #define DEFAULT_DB_ENVIRONMENT ".git/objects"
 
init-db.c: 14beb35657de229a61673198bfc4e009daafca15
--- a/init-db.c
+++ b/init-db.c
@@ -23,10 +23,15 @@ void safe_create_dir(char *dir)
  */
 int main(int argc, char **argv)
 {
-	char *sha1_dir, *path;
+	char *sha1_dir, *path, *git_dir;
 	int len, i;
 
-	safe_create_dir(".git");
+	git_dir = getenv(GIT_CACHE_ENVIRONMENT);
+	if (!git_dir) {
+		git_dir = DEFAULT_GIT_CACHE_ENVIRONMENT;
+		fprintf(stderr, "defaulting to local cache area\n");
+	}	
+	safe_create_dir(git_dir);
 
 	sha1_dir = getenv(DB_ENVIRONMENT);
 	if (!sha1_dir) {
read-cache.c: edaadf3e1c0714735ca8d80301dd644aa0f9cd2a
--- a/read-cache.c
+++ b/read-cache.c
@@ -174,22 +174,33 @@ static int verify_hdr(struct cache_heade
 
 int read_cache(void)
 {
-	int fd, i;
+	int fd, i, len;
 	struct stat st;
 	unsigned long size, offset;
 	void *map;
 	struct cache_header *hdr;
+	char *index_path, *index_file;
 
 	errno = EBUSY;
 	if (active_cache)
 		return error("more than one cachefile");
 	errno = ENOENT;
+
 	sha1_file_directory = getenv(DB_ENVIRONMENT);
 	if (!sha1_file_directory)
 		sha1_file_directory = DEFAULT_DB_ENVIRONMENT;
 	if (access(sha1_file_directory, X_OK) < 0)
 		return error("no access to SHA1 file directory");
-	fd = open(".git/index", O_RDONLY);
+
+	index_path = getenv(GIT_CACHE_ENVIRONMENT);
+	if (!index_path)
+		index_path = DEFAULT_GIT_CACHE_ENVIRONMENT;
+	len = strlen(index_path);
+	index_file = malloc(len + 7);
+	if (!index_file) error("out of memory");
+	sprintf(index_file, "%s/index", index_path);
+
+	fd = open(index_file, O_RDONLY);
 	if (fd < 0)
 		return (errno == ENOENT) ? 0 : error("open failed");
 
read-tree.c: 9bcba2d567e1c86ae967d383cc081e6947d00a13
--- a/read-tree.c
+++ b/read-tree.c
@@ -65,12 +65,12 @@ static int read_tree(unsigned char *sha1
 	return 0;
 }
 
-static int remove_lock = 0;
+static char *index_lock = NULL;
 
 static void remove_lock_file(void)
 {
-	if (remove_lock)
-		unlink(".git/index.lock");
+	if (index_lock)
+		unlink(index_lock);
 }
 
 static int path_matches(struct cache_entry *a, struct cache_entry *b)
@@ -205,14 +205,27 @@ static void merge_stat_info(struct cache
 
 int main(int argc, char **argv)
 {
-	int i, newfd, merge;
+	int i, newfd, len, merge;
 	unsigned char sha1[20];
-
-	newfd = open(".git/index.lock", O_RDWR | O_CREAT | O_EXCL, 0600);
+ 	char *index_file, *index_path;
+  
+ 	index_path = getenv(GIT_CACHE_ENVIRONMENT);
+ 	if (!index_path)
+ 		index_path = DEFAULT_GIT_CACHE_ENVIRONMENT;
+ 
+ 	len = strlen(index_path);
+ 	index_file = malloc(len + 7);
+ 	if (!index_file) error("out of memory");
+ 	sprintf(index_file, "%s/index", index_path);
+ 
+ 	index_lock = malloc(len + 12);
+ 	if (!index_lock) error("out of memory");
+ 	sprintf(index_lock, "%s/index.lock", index_path);
+ 
+ 	newfd = open(index_lock, O_RDWR | O_CREAT | O_EXCL, 0600);
 	if (newfd < 0)
 		die("unable to create new cachefile");
 	atexit(remove_lock_file);
-	remove_lock = 1;
 
 	merge = 0;
 	for (i = 1; i < argc; i++) {
@@ -253,8 +266,12 @@ int main(int argc, char **argv)
 		}
 	}
 	if (write_cache(newfd, active_cache, active_nr) ||
-	    rename(".git/index.lock", ".git/index"))
+	    rename(index_lock, index_file))
 		die("unable to write new index file");
-	remove_lock = 0;
+
+	free(index_file);
+	free(index_lock);
+	index_lock = NULL;
+
 	return 0;
 }
update-cache.c: 0d16b36d7d074e9f0a2811a40e16e9823a628ec9
--- a/update-cache.c
+++ b/update-cache.c
@@ -270,25 +270,37 @@ static int add_cacheinfo(char *arg1, cha
 	return add_cache_entry(ce, allow_add);
 }
 
-static int remove_lock = 0;
+static char *index_lock = NULL;
 
 static void remove_lock_file(void)
 {
-	if (remove_lock)
-		unlink(".git/index.lock");
+	if (index_lock)
+		unlink(index_lock);
 }
 
 int main(int argc, char **argv)
 {
-	int i, newfd, entries;
+	int i, newfd, entries, len;
 	int allow_options = 1;
+	char *index_file, *index_path;
 
-	newfd = open(".git/index.lock", O_RDWR | O_CREAT | O_EXCL, 0600);
+	index_path = getenv(GIT_CACHE_ENVIRONMENT);
+	if (!index_path)
+		index_path = DEFAULT_GIT_CACHE_ENVIRONMENT;
+
+	len = strlen(index_path);
+	index_file = malloc(len + 7);
+	if (!index_file) error("out of memory");
+	sprintf(index_file, "%s/index", index_path);
+
+	index_lock = malloc(len + 12);
+	if (!index_lock) error("out of memory");
+	sprintf(index_lock, "%s/index.lock", index_path);
+
+	newfd = open(index_lock, O_RDWR | O_CREAT | O_EXCL, 0600);
 	if (newfd < 0)
 		die("unable to create new cachefile");
-
 	atexit(remove_lock_file);
-	remove_lock = 1;
 
 	entries = read_cache();
 	if (entries < 0)
@@ -330,9 +342,12 @@ int main(int argc, char **argv)
 			die("Unable to add %s to database", path);
 	}
 	if (write_cache(newfd, active_cache, active_nr) ||
-	    rename(".git/index.lock", ".git/index"))
+	    rename(index_lock, index_file))
 		die("Unable to write new cachefile");
 
-	remove_lock = 0;
+	free(index_file);
+	free(index_lock);
+	index_lock = NULL;
+
 	return 0;
 }
-
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html



From news@gmane.org Tue Mar 04 03:33:20 2003
From: Zach Welch <zw@superlucidity.net>
Subject: [PATCH 2/3] rename object directory symbols
Date: Tue, 19 Apr 2005 21:32:06 -0700
Lines: 104
Message-ID: <mailbox-1370-1113971526-296848@spoon>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Cc: torvalds@osdl.org
X-From: git-owner@vger.kernel.org Wed Apr 20 06:28:54 2005
Return-path: <git-owner@vger.kernel.org>
Received: from vger.kernel.org ([12.107.209.244])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1DO6pM-0007Yy-No
	for gcvg-git@gmane.org; Wed, 20 Apr 2005 06:28:40 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261360AbVDTEct (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 20 Apr 2005 00:32:49 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261369AbVDTEct
	(ORCPT <rfc822;git-outgoing>); Wed, 20 Apr 2005 00:32:49 -0400
Received: from guft.superlucidity.net ([63.224.205.130]:23439 "EHLO
	mail.guft.org") by vger.kernel.org with ESMTP id S261360AbVDTEcL
	(ORCPT <rfc822;git@vger.kernel.org>);
	Wed, 20 Apr 2005 00:32:11 -0400
Received: (qmail 1383 invoked by uid 5006); 19 Apr 2005 21:32:10 -0700
To: git@vger.kernel.org
In-Reply-To: mailbox-1370-1113971526-282751@spoon
Lines: 99
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Status: RO

This patch applies on top of:
        [PATCH 1/3] add GIT_CACHE_DIRECTORY support

 cache.h      |    4 ++--
 fsck-cache.c |    2 +-
 init-db.c    |    4 ++--
 ls-tree.c    |    4 ++--
 read-cache.c |    4 ++--
 sha1_file.c  |    2 +-
 6 files changed, 10 insertions(+), 10 deletions(-)

Signed-Off-By: Zach Welch <zw@superlucidity.net>

Rename the DB_ENVIRONMENT symbols to match the newly introduced
GIT_CACHE_ENVIROMENT symbols.

cache.h: 1fca894f485471d51c6a72c16e02df6d56d0052f
--- a/cache.h
+++ b/cache.h
@@ -84,8 +84,8 @@ unsigned int active_nr, active_alloc;
 #define GIT_CACHE_ENVIRONMENT "GIT_CACHE_DIRECTORY"
 #define DEFAULT_GIT_CACHE_ENVIRONMENT ".git"
 
-#define DB_ENVIRONMENT "SHA1_FILE_DIRECTORY"
-#define DEFAULT_DB_ENVIRONMENT ".git/objects"
+#define GIT_OBJECT_ENVIRONMENT "SHA1_FILE_DIRECTORY"
+#define DEFAULT_GIT_OBJECT_ENVIRONMENT ".git/objects"
 
 #define alloc_nr(x) (((x)+16)*3/2)
 
fsck-cache.c: cf39b7e054d9685fde7004ec767cd098b97e8ce7
--- a/fsck-cache.c
+++ b/fsck-cache.c
@@ -135,7 +135,7 @@ int main(int argc, char **argv)
 	int i, heads;
 	char *sha1_dir;
 
-	sha1_dir = getenv(DB_ENVIRONMENT) ? : DEFAULT_DB_ENVIRONMENT;
+	sha1_dir = getenv(GIT_OBJECT_ENVIRONMENT) ? : DEFAULT_GIT_OBJECT_ENVIRONMENT;
 	for (i = 0; i < 256; i++) {
 		static char dir[4096];
 		sprintf(dir, "%s/%02x", sha1_dir, i);
init-db.c: 9e693a0a914512c5574f394222cfc75496e3453a
--- a/init-db.c
+++ b/init-db.c
@@ -33,9 +33,9 @@ int main(int argc, char **argv)
 	}	
 	safe_create_dir(git_dir);
 
-	sha1_dir = getenv(DB_ENVIRONMENT);
+	sha1_dir = getenv(GIT_OBJECT_ENVIRONMENT);
 	if (!sha1_dir) {
-		sha1_dir = DEFAULT_DB_ENVIRONMENT;
+		sha1_dir = DEFAULT_GIT_OBJECT_ENVIRONMENT;
 		fprintf(stderr, "defaulting to local storage area\n");
 	}
 	len = strlen(sha1_dir);
ls-tree.c: 936bb19a5525046a5a784d5f14c3ea7da406cc62
--- a/ls-tree.c
+++ b/ls-tree.c
@@ -105,9 +105,9 @@ int main(int argc, char **argv)
 		usage(ls_tree_usage);
 	if (get_sha1_hex(argv[1], sha1) < 0)
 		usage(ls_tree_usage);
-	sha1_file_directory = getenv(DB_ENVIRONMENT);
+	sha1_file_directory = getenv(GIT_OBJECT_ENVIRONMENT);
 	if (!sha1_file_directory)
-		sha1_file_directory = DEFAULT_DB_ENVIRONMENT;
+		sha1_file_directory = DEFAULT_GIT_OBJECT_ENVIRONMENT;
 	if (list(sha1) < 0)
 		die("list failed");
 	return 0;
read-cache.c: 9eee23097b9406548765ec6fc77e61788317df19
--- a/read-cache.c
+++ b/read-cache.c
@@ -186,9 +186,9 @@ int read_cache(void)
 		return error("more than one cachefile");
 	errno = ENOENT;
 
-	sha1_file_directory = getenv(DB_ENVIRONMENT);
+	sha1_file_directory = getenv(GIT_OBJECT_ENVIRONMENT);
 	if (!sha1_file_directory)
-		sha1_file_directory = DEFAULT_DB_ENVIRONMENT;
+		sha1_file_directory = DEFAULT_GIT_OBJECT_ENVIRONMENT;
 	if (access(sha1_file_directory, X_OK) < 0)
 		return error("no access to SHA1 file directory");
 
sha1_file.c: c4591cd2168ae2e42c1fc9878be8befbfa1a8afa
--- a/sha1_file.c
+++ b/sha1_file.c
@@ -61,7 +61,7 @@ char *sha1_file_name(const unsigned char
 	static char *name, *base;
 
 	if (!base) {
-		char *sha1_file_directory = getenv(DB_ENVIRONMENT) ? : DEFAULT_DB_ENVIRONMENT;
+		char *sha1_file_directory = getenv(GIT_OBJECT_ENVIRONMENT) ? : DEFAULT_GIT_OBJECT_ENVIRONMENT;
 		int len = strlen(sha1_file_directory);
 		base = malloc(len + 60);
 		memcpy(base, sha1_file_directory, len);
-
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html



From news@gmane.org Tue Mar 04 03:33:20 2003
From: Zach Welch <zw@superlucidity.net>
Subject: [PATCH 3/3] rename SHA1_FILE_DIRECTORY
Date: Tue, 19 Apr 2005 21:32:06 -0700
Lines: 29
Message-ID: <mailbox-1370-1113971526-299194@spoon>
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7BIT
Cc: torvalds@osdl.org
X-From: git-owner@vger.kernel.org Wed Apr 20 06:29:00 2005
Return-path: <git-owner@vger.kernel.org>
Received: from vger.kernel.org ([12.107.209.244])
	by ciao.gmane.org with esmtp (Exim 4.43)
	id 1DO6pR-0007ZK-Va
	for gcvg-git@gmane.org; Wed, 20 Apr 2005 06:28:46 +0200
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
	id S261368AbVDTEcz (ORCPT <rfc822;gcvg-git@m.gmane.org>);
	Wed, 20 Apr 2005 00:32:55 -0400
Received: (majordomo@vger.kernel.org) by vger.kernel.org id S261369AbVDTEcz
	(ORCPT <rfc822;git-outgoing>); Wed, 20 Apr 2005 00:32:55 -0400
Received: from guft.superlucidity.net ([63.224.205.130]:23951 "EHLO
	mail.guft.org") by vger.kernel.org with ESMTP id S261368AbVDTEcN
	(ORCPT <rfc822;git@vger.kernel.org>);
	Wed, 20 Apr 2005 00:32:13 -0400
Received: (qmail 1387 invoked by uid 5006); 19 Apr 2005 21:32:12 -0700
To: git@vger.kernel.org
In-Reply-To: mailbox-1370-1113971526-282751@spoon
Lines: 24
Sender: git-owner@vger.kernel.org
Precedence: bulk
X-Mailing-List: git@vger.kernel.org
Status: RO

This patch applies on top of:
        [PATCH 1/3] add GIT_CACHE_DIRECTORY support
        [PATCH 2/3] rename object directory symbols

 cache.h |    2 +-
 1 files changed, 1 insertion(+), 1 deletion(-)

Signed-Off-By: Zach Welch <zw@superlucidity.net>

Rename SHA1_FILE_DIRECTORY to GIT_OBJECT_DIRECTORY.  Scripts that
used to pass this setting will need to be updated.

cache.h: 218bec12fab3fb57ad03fafccedd4398c64c3646
--- a/cache.h
+++ b/cache.h
@@ -84,7 +84,7 @@ unsigned int active_nr, active_alloc;
 #define GIT_CACHE_ENVIRONMENT "GIT_CACHE_DIRECTORY"
 #define DEFAULT_GIT_CACHE_ENVIRONMENT ".git"
 
-#define GIT_OBJECT_ENVIRONMENT "SHA1_FILE_DIRECTORY"
+#define GIT_OBJECT_ENVIRONMENT "GIT_OBJECT_DIRECTORY"
 #define DEFAULT_GIT_OBJECT_ENVIRONMENT ".git/objects"
 
 #define alloc_nr(x) (((x)+16)*3/2)
-
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html



